@using System.Globalization
@using Bumbo.Data.Models.Enums
@model DepartmentViewModel
@inject IViewLocalizer Localizer

@{
    ViewBag.Title = Localizer["Department Schedule"];
    ViewBag.ContainerType = "container-fluid";

    var canEdit = User.HasClaim("Manager", Model.Branch.Id.ToString());
}

<div class="row">
    <div class="col-2">
        <h4>
            @Localizer["Week"] @Html.DisplayFor(model => model.Week)
            <span class="font-weight-normal">
                @Html.DisplayFor(model => model.Year)
            </span>
            @if (Model.ScheduleApproved)
            {
                <br/>
                <span style="font-size: 16px" class="text-danger font-weight-normal">(@Localizer["Approved"])</span>
            }
            @if (!Model.Department.HasValue && canEdit)
            {
                <br/>
                <span style="font-size: 16px" class="text-danger font-weight-normal">(@Localizer["Read Only"])</span>
            }
        </h4>
    </div>
    <div class="col d-print-none">
        <div class="btn-group text-white" role="group" aria-label="Week Navigation">
            <a asp-action="Week" asp-route-branchId="@Model.Branch.Id" asp-route-department="@Model.Department" asp-route-year="@Model.PreviousYear" asp-route-week="@Model.PreviousWeek" class="btn btn-secondary">
                <i class="fa fa-angle-left" aria-hidden="true"></i>
            </a>
            <a asp-action="Week" asp-route-branchId="@Model.Branch.Id" asp-route-department="@Model.Department" asp-route-year="@DateTime.Today.Year" asp-route-week="@ISOWeek.GetWeekOfYear(DateTime.Today)" class="btn btn-secondary">
                @Localizer["Today"]
            </a>
            <a asp-action="Week" asp-route-branchId="@Model.Branch.Id" asp-route-department="@Model.Department" asp-route-year="@Model.NextYear" asp-route-week="@Model.NextWeek" class="btn btn-secondary">
                <i class="fa fa-angle-right" aria-hidden="true"></i>
            </a>
        </div>
        <div class="btn-group text-white" role="group" aria-label="Select Department">
            <a class="btn btn-secondary">@Localizer["Department"]</a>

            <div class="btn-group" role="group">
                <button id="departmentGroup" type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @(Model.Department.HasValue ? Html.DisplayFor(model => model.Department.Value) : @Localizer["All"])
                </button>
                <div class="dropdown-menu" aria-labelledby="departmentGroup">
                    <a asp-action="Week" asp-route-branchId="@Model.Branch.Id" asp-route-department="" asp-route-year="@Model.Year" asp-route-week="@Model.Week" class="dropdown-item">@Localizer["All"]</a>
                    @foreach (var department in Enum.GetValues<Department>())
                    {
                        @if (User.HasClaim("Manager", Model.Branch.Id.ToString()) || User.HasClaim("BranchDepartment", $"{Model.Branch.Id}.{department}"))
                        {
                            <a asp-action="Week" asp-route-department="@department" asp-route-branchId="@Model.Branch.Id" asp-route-year="@Model.Year" asp-route-week="@Model.Week" class="dropdown-item">@Html.DisplayFor(model => department)</a>
                        }
                    }
                </div>
            </div>
        </div>

    </div>
    <div class="col d-print-none text-right">
        <button class="btn btn-secondary" onclick="window.print()">@Localizer["Print"]</button>
        <button class="btn btn-secondary" data-toggle="modal" data-target="#copyScheduleModal">@Localizer["Copy Schedule"]</button>
        @if (!Model.ScheduleApproved && Model.Department.HasValue)
        {
            <button class="btn btn-secondary" data-toggle="modal" data-target="#approveScheduleModal">@Localizer["Approve Schedule"]</button>
        }
    </div>
</div>

<br/>

<table class="table table-bordered table-striped table-sm">
    <thead class="text-center">
    <tr>
        <th class="text-left">@Html.DisplayNameFor(model => model.EmployeeShifts.FirstOrDefault().Name)</th>
        <th class="text-left">@Html.DisplayNameFor(model => model.EmployeeShifts.FirstOrDefault().Scale)</th>

        @foreach (var day in Model.DaysOfWeek)
        {
            <th>@ISOWeek.ToDateTime(Model.Year, Model.Week, day).ToString("ddd dd-MM")</th>
        }

        <th>@Localizer["Total"]</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var employeeShift in Model.EmployeeShifts)
    {
        <tr>
            <td>
                @if (Model.Department.HasValue && canEdit)
                {
                    <span class="fa-stack fa-sm align-super">
                        @if (employeeShift.Shifts.Any(shift => shift.Notifications.Any()))
                        {
                            <i class="fa fa-stack-2x fa-square text-warning"></i>
                            <i class="fa fa-stack-1x fa-exclamation text-white"></i>
                        }
                    </span>
                }
                <span class="d-inline-block">
                    @Html.DisplayFor(model => employeeShift.Name)
                    <br/>
                    <span class="text-secondary">
                        @Html.DisplayFor(model => employeeShift.Contract)
                    </span>
                </span>
                <span class="align-super float-right">
                    <i class="fa fa-angle-down"></i>
                </span>
            </td>
            <td class="align-middle">@Html.DisplayFor(model => employeeShift.Scale)</td>

            @foreach (var day in Model.DaysOfWeek)
            {
                @if (employeeShift.Shifts.Any(shift => shift.Date.DayOfWeek == day))
                {
                    var firstRow = true;

                    <td class="align-middle">
                        @foreach (var shift in employeeShift.Shifts.Where(shift1 => shift1.Date.DayOfWeek == day).Where(shift1 => !Model.Department.HasValue || shift1.Department == Model.Department.Value))
                        {
                            @if (!firstRow)
                            {
                                <hr style="margin: 0 -.3rem"/>
                            }
                            firstRow = false;

                            <div class="@(Model.Department.HasValue && canEdit ? "c-pointer" : "")" @Html.ConditionalAttr("onclick", $"shiftModal({shift.Id}, {employeeShift.UserId}, '{employeeShift.Name}', '{shift.Date:yyyy-MM-dd}', '{shift.StartTime:hh\\:mm}', '{shift.EndTime:hh\\:mm}', {(shift.Sick ? "true" : "false")}, {Model.Branch.Id} )", Model.Department.HasValue && canEdit)>
                                @if (!Model.Department.HasValue)
                                {
                                    <div>
                                        <span class="fa-stack fa-sm">
                                            <i class="fa fa-stack-2x fa-square"></i>
                                            <i class="fa fa-stack-1x fa-building text-white"></i>
                                        </span>
                                        @Html.DisplayFor(model => shift.Department)
                                    </div>
                                }
                                <div>
                                    @if (Model.Department.HasValue && canEdit && shift.Notifications.Any())
                                    {
                                        <span class="fa-stack fa-sm" data-toggle="tooltip" data-placement="bottom" data-html="true"
                                              @Html.ConditionalAttr("title", $"<ul class=\"list-unstyled\">{string.Join("", shift.Notifications.Select(notification => $"<li>{notification}</li>"))}</ul>")>

                                            <i class="fa fa-stack-2x fa-square text-warning"></i>
                                            <i class="fa fa-stack-1x fa-briefcase text-white"></i>
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="fa-stack fa-sm">
                                            <i class="fa fa-stack-2x fa-square"></i>
                                            <i class="fa fa-stack-1x fa-briefcase text-white"></i>
                                        </span>
                                    }
                                    @Html.DisplayFor(model => shift.StartTime)-@Html.DisplayFor(model => shift.EndTime)
                                </div>
                                @if (shift.BreakTime.Ticks > 0)
                                {
                                    <div>
                                        <span class="fa-stack fa-sm">
                                            <i class="fa fa-stack-2x fa-square"></i>
                                            <i class="fa fa-stack-1x fa-coffee text-white"></i>
                                        </span>
                                        @Html.DisplayFor(model => shift.BreakTime)
                                    </div>
                                }
                            </div>
                        }
                    </td>
                }
                else
                {
                    var clickable = Model.Department.HasValue && User.HasClaim("Manager", Model.Branch.Id.ToString());

                    <td class="@(clickable ? "c-pointer" : "")" @Html.ConditionalAttr("onclick", $"shiftModal('', {employeeShift.UserId}, '{employeeShift.Name}', '{ISOWeek.ToDateTime(Model.Year, Model.Week, day):yyyy-MM-dd}','','', false, {Model.Branch.Id})", clickable)>

                    </td>
                }
            }

            <td class="align-middle">
                <span class="@(employeeShift.PlannedTime > employeeShift.MaxHours ? "text-danger" : "")">
                    @($"{employeeShift.PlannedTime.TotalHours:00}:{employeeShift.PlannedTime.Minutes:00}")
                </span>
                <span> / </span>
                <span>
                    @($"{employeeShift.MaxHours.TotalHours:00}:{employeeShift.MaxHours.Minutes:00}")
                </span>
            </td>
        </tr>
    }
    </tbody>
</table>

<partial name="_ShiftModal" model="Model.InputShift"/>

<partial name="_CopyWeekModal" model="Model.InputCopyWeek"/>

@if (!Model.ScheduleApproved)
{
    <partial name="_ApproveScheduleModal" model="Model.InputApproveSchedule"/>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial"/>
}