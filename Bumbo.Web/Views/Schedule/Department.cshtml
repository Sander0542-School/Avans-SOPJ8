@using System.Globalization
@model DepartmentViewModel
@inject IViewLocalizer Localizer

@{
    ViewBag.Title = Localizer["DepartmentSchedule"];
    ViewBag.ContainerType = "container-fluid";
}

<div class="row">
    <div class="col-2">
        <h4>
            @Localizer["Week"] @Html.DisplayFor(model => model.Week)
            <span class="font-weight-normal">
                @Html.DisplayFor(model => model.Year)
            </span>
        </h4>
    </div>
    <div class="col">
        <h5>
            @ViewBag.Title @Html.DisplayFor(model => model.Department)
            @if (Model.ScheduleApproved)
            {
                <span class="text-danger font-weight-normal">(@Localizer["Approved"])</span>
            }
        </h5>
    </div>
    <div class="col-4 d-print-none text-right">
        <button class="btn btn-secondary" onclick="window.print()">@Localizer["Print"]</button>
        <button class="btn btn-secondary" data-toggle="modal" data-target="#copyScheduleModal">@Localizer["CopySchedule"]</button>
        @if (!Model.ScheduleApproved)
        {
            <button class="btn btn-secondary" data-toggle="modal" data-target="#approveScheduleModal">@Localizer["ApproveSchedule"]</button>
        }
    </div>
</div>

<table class="table table-bordered table-striped table-sm">
    <thead class="text-center">
    <tr>
        <th class="text-left">@Html.DisplayNameFor(model => model.EmployeeShifts.FirstOrDefault().Name)</th>
        <th class="text-left">@Html.DisplayNameFor(model => model.EmployeeShifts.FirstOrDefault().Scale)</th>

        @foreach (var day in Model.DaysOfWeek)
        {
            <th>@ISOWeek.ToDateTime(Model.Year, Model.Week, day).ToString("ddd dd-MM")</th>
        }

        <th>@Localizer["Total"]</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var employeeShift in Model.EmployeeShifts)
    {
        <tr>
            <td>
                <span class="fa-stack fa-sm align-super">
                    @if (employeeShift.Shifts.Any(shift => shift.Notifications.Any()))
                    {
                        <i class="fa fa-stack-2x fa-square text-warning"></i>
                        <i class="fa fa-stack-1x fa-exclamation text-white"></i>
                    }
                </span>
                <span class="d-inline-block">
                    @Html.DisplayFor(model => employeeShift.Name)
                    <br/>
                    <span class="text-secondary">
                        @Html.DisplayFor(model => employeeShift.Contract)
                    </span>
                </span>
                <span class="align-super float-right">
                    <i class="fa fa-angle-down"></i>
                </span>
            </td>
            <td class="align-middle">@Html.DisplayFor(model => employeeShift.Scale)</td>

            @foreach (var day in Model.DaysOfWeek)
            {
                @if (employeeShift.Shifts.Any(shift => shift.Date.DayOfWeek == day))
                {
                    var shift = employeeShift.Shifts.First(shift1 => shift1.Date.DayOfWeek == day);

                    <td class="align-middle c-pointer" onclick="shiftModal(@($"{shift.Id}, {employeeShift.UserId}, '{employeeShift.Name}', '{shift.Date:yyyy-MM-dd}', '{shift.StartTime:hh\\:mm}', '{shift.EndTime:hh\\:mm}'"))">
                        <span>
                            @if (shift.Notifications.Any())
                            {
                                <span class="fa-stack fa-sm"
                                      data-toggle="tooltip"
                                      data-placement="bottom"
                                      data-html="true"
                                      title="<ul class='list-unstyled'>@foreach (var notification in shift.Notifications) {<li>@notification</li>}</ul>">

                                    <i class="fa fa-stack-2x fa-square text-warning"></i>
                                    <i class="fa fa-stack-1x fa-briefcase text-white"></i>
                                </span>
                            }
                            else
                            {
                                <span class="fa-stack fa-sm">
                                    <i class="fa fa-stack-2x fa-square"></i>
                                    <i class="fa fa-stack-1x fa-briefcase text-white"></i>
                                </span>
                            }
                            @Html.DisplayFor(model => shift.StartTime)-@Html.DisplayFor(model => shift.EndTime)
                            @if (shift.BreakTime.Ticks > 0)
                            {
                                <br/>
                                <span>
                                    <span class="fa-stack fa-sm">
                                        <i class="fa fa-stack-2x fa-square"></i>
                                        <i class="fa fa-stack-1x fa-coffee text-white"></i>
                                    </span>
                                    @Html.DisplayFor(model => shift.BreakTime)
                                </span>
                            }
                        </span>
                    </td>
                }
                else
                {
                    <td class="c-pointer" onclick="shiftModal(@($"'', {employeeShift.UserId}, '{employeeShift.Name}', '{ISOWeek.ToDateTime(Model.Year, Model.Week, day):yyyy-MM-dd}','',''"))">

                    </td>
                }
            }

            <td class="align-middle">
                <span class="@(employeeShift.PlannedTime > employeeShift.MaxHours ? "text-danger" : "")">
                    @($"{employeeShift.PlannedTime.TotalHours:00}:{employeeShift.PlannedTime.Minutes:00}")
                </span>
                <span> / </span>
                <span>
                    @($"{employeeShift.MaxHours.TotalHours:00}:{employeeShift.MaxHours.Minutes:00}")
                </span>
            </td>
        </tr>
    }
    </tbody>
</table>

<partial name="_ShiftModal" model="Model.InputShift"/>

<partial name="_CopyWeekModal" model="Model.InputCopyWeek"/>

@if (!Model.ScheduleApproved)
{
    <partial name="_ApproveScheduleModal" model="Model.InputApproveSchedule"/>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial"/>
}